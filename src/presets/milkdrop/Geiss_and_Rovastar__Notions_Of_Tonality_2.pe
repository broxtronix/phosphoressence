from presets import PePreset

class Geiss_and_Rovastar__Notions_Of_Tonality_2(PePreset):

    name = 'Geiss_and_Rovastar__Notions_Of_Tonality_2'


    def per_frame(self):
        fRating=3
        pe.gamma=2.693
        pe.decay=0.97
        pe.echo_zoom=1.628259
        pe.echo_alpha=0
        pe.echo_orient=0
        pe.wave_mode=6
        pe.wave_additive=0
        pe.wave_usedots=0
        bWaveThick=0
        bModWaveAlphaByVolume=0
        pe.wave_brighten=1
        pe.wrap=0
        pe.darken_center=0
        bRedBlueStereo=0
        pe.brighten=0
        pe.darken=0
        pe.solarize=0
        pe.invert=0
        pe.wave_a=0.2
        fWaveScale=1.09326
        fWaveSmoothing=0.1
        pe.wave_mystery=-0.4
        fModWaveAlphaStart=0.75
        fModWaveAlphaEnd=0.95
        pe.warp_speed=1
        pe.warp_scale=3.259127
        pe.zoomexp=1
        fShader=1
        pe.zoom=1.00496
        pe.rot=0
        pe.cx=0.5
        pe.cy=0.5
        pe.dx=0
        pe.dy=0
        pe.warp=0.180378
        pe.sx=0.999666
        pe.sy=0.9999
        pe.wave_r=0.65
        pe.wave_g=0.65
        pe.wave_b=0.65
        pe.wave_x=0.5
        pe.wave_y=0.38
        pe.ob_size=0.01
        pe.ob_r=0
        pe.ob_g=0
        pe.ob_b=0
        pe.ob_a=0.1
        pe.ib_size=0.01
        pe.ib_r=0.55
        pe.ib_g=0.25
        pe.ib_b=0.25
        pe.ib_a=0.1
        pe.mv_x=57.599998
        pe.mv_y=44.16
        pe.mv_dx=0.002
        pe.mv_dy=0.002
        pe.mv_l=5
        pe.mv_r=0.7
        pe.mv_g=0.4
        pe.mv_b=0.5
        pe.mv_a=0.1
        pe.mv_r = pe.wave_r + 0.35*( 0.60*math.sin(0.980*pe.time) + 0.40*math.sin(1.047*pe.time) );
        pe.mv_g = pe.wave_g + 0.35*( 0.60*math.sin(0.835*pe.time) + 0.40*math.sin(1.081*pe.time) );
        pe.mv_b = pe.wave_b + 0.35*( 0.60*math.sin(0.814*pe.time) + 0.40*math.sin(1.011*pe.time));
        pe.q1 = (pe.cx*2-1) + 0.62*( 0.60*math.sin(0.474*pe.time) + 0.40*math.sin(0.394*pe.time) );
        pe.q2 = (pe.cy*2-1) + 0.62*( 0.60*math.sin(0.413*pe.time) + 0.40*math.sin(0.323*pe.time) );
        pe.q3 = (pe.cx*2-1) + 0.62*( 0.60*math.sin(0.274*-pe.time) + 0.40*math.sin(0.464*pe.time) );
        pe.q4 = (pe.cy*2-1) + 0.62*( 0.60*math.sin(0.334*pe.time) + 0.40*math.sin(0.371*-pe.time) );
        pe.decay = pe.decay - 0.01*math.equal(pe.frame%5,0);
        pe.cy = pe.cy + 0.1*math.sin(pe.time*0.245);
        pe.cx = pe.cx + 0.1*math.cos(pe.time*0341);
        pe.wave_mystery = 2;
        #pe.mv_l = 2*max(max(pe.bass,pe.pe.bass_att)-1.2,0);
        pe.warp = pe.warp * math.pow(2, 0.6*math.sin(pe.time*0.194));

    def per_pixel(self):
        du = pe.x*2-1 - pe.q1;
        dv = pe.y*2-1 - pe.q2;
        dist = math.sqrt(du*du+dv*dv);
        ang2 = atan2(du,dv);
        mult = 0.008/(dist+0.4);
        pe.dx = mult*math.sin(ang2-1.5);
        pe.dy = mult*math.cos(ang2-1.5);
        du = pe.x*2-1 - pe.q3;
        dv = pe.y*2-1 - pe.q4;
        dist = math.sqrt(du*du+dv*dv);
        ang2 = atan2(du,dv);
        mult = 0.008/(dist+0.7);
        pe.dx = pe.dx + mult*math.sin(ang2+1.5);
        pe.dy = pe.dy + mult*math.cos(ang2+1.5);
