name = 'Geiss_and_Rovastar__Tokamak_Naked_Intrusion_Mix'

def initialize():
    pass

def per_frame():
    fRating=3
    pe.gamma=1.993
    pe.decay=0.98
    echo_zoom=2
    echo_alpha=0
    echo_orient=0
    pe.wave_mode=0
    pe.wave_additive=0
    pe.wave_usedots=0
    bModWaveAlphaByVolume=0
    pe.wave_brighten=0
    pe.wrap=0
    darken_center=0
    bRedBlueStereo=0
    brighten=0
    darken=0
    solarize=0
    pe.invert=0
    pe.wave_a=1
    fWaveScale=0.01
    fWaveSmoothing=0.7
    pe.wave_mystery=-0.4
    fModWaveAlphaStart=0.75
    fModWaveAlphaEnd=0.95
    pe.warp_speed=1
    pe.warp_scale=1.331
    pe.zoomexp=1
    fShader=0
    pe.zoom=1.004
    pe.rot=0
    pe.cx=0.5
    pe.cy=0.5
    pe.dx=0
    pe.dy=0
    pe.warp=0.197884
    pe.sx=0.999667
    pe.sy=0.9999
    pe.wave_r=0.55
    pe.wave_g=0.55
    pe.wave_b=0.55
    pe.wave_x=0.5
    pe.wave_y=0.68
    pe.ob_size=0.01
    pe.ob_r=1
    pe.ob_g=0
    pe.ob_b=0
    pe.ob_a=0.7
    pe.ib_size=0.01
    pe.ib_r=0
    pe.ib_g=0
    pe.ib_b=0
    pe.ib_a=1
    pe.mv_x=64
    pe.mv_y=48
    pe.mv_l=0
    pe.mv_r=0.8
    pe.mv_g=0.8
    pe.mv_b=0.8
    pe.mv_a=1
    pe.mv_r = pe.mv_r + 0.2*( 0.60*math.sin(0.980*pe.time) + 0.40*math.sin(1.047*pe.time) );
    pe.mv_g = pe.mv_g + 0.2*( 0.60*math.sin(0.835*pe.time) + 0.40*math.sin(1.081*pe.time) );
    pe.mv_b = pe.mv_b + 0.2*( 0.60*math.sin(0.814*pe.time) + 0.40*math.sin(1.011*pe.time) );
    pe.q1 = (pe.cx*2-1) + 0.6*( 0.60*math.sin(0.374*pe.time) + 0.40*math.sin(0.294*pe.time) );
    pe.q2 = (pe.cy*2-1) + 0.6*( 0.60*math.sin(0.393*pe.time) + 0.40*math.sin(0.223*pe.time) );
    pe.ob_r = 1- 0.4*math.abs(pe.q1);
    pe.ob_g = 0.3*math.abs(pe.q2);
    pe.ob_b = 0.4*math.abs(pe.q1);
    pe.wave_x = 1-math.abs(pe.q2)-0.05;
    pe.wave_y = 1-math.abs(pe.q1)-0.06;
    pe.wave_r = pe.wave_r + 0.4*( 0.60*math.sin(0.514*pe.time) + 0.40*math.sin(1.211*pe.time) );
    pe.wave_b = pe.wave_b + 0.4*( 0.60*math.sin(0.714*pe.time) + 0.40*math.sin(pe.q2) );
    pe.wave_g = pe.wave_g + 0.4*( 0.60*math.sin(10*pe.q1) + 0.40*math.sin(10*pe.q2) );

def per_pixel():
    du = (pe.x*2-1) - pe.q1;
    dv = (pe.y*2-1) - pe.q2;
    dist = math.sqrt(du*du+dv*dv);
    ang2 = atan2(du,dv) + pe.time*0.15;
    mult = 0.65*math.sin(dist*0.05);
    pe.dx = mult*math.sin(ang2*2-1.5);
    pe.dy = mult*math.cos(ang2*2-1.5);

pe_presets.register(name, per_frame, initialize, per_pixel)
