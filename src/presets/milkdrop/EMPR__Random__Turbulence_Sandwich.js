function EMPR__Random__Turbulence_Sandwich() {
  with (Math) {
    fRating=2;
    gamma=2;
    decay=0.95;
    echo_zoom=3.007504;
    echo_alpha=0;
    echo_orient=1;
    wave_mode=0;
    wave_additive=0;
    wave_usedots=0;
    bWaveThick=0;
    bModWaveAlphaByVolume=0;
    wave_brighten=0;
    wrap=0;
    darken_center=1;
    bRedBlueStereo=0;
    brighten=0;
    darken=1;
    solarize=0;
    invert=0;
    wave_a=1;
    fWaveScale=0.880224;
    fWaveSmoothing=0;
    wave_mystery=0.933237;
    fModWaveAlphaStart=0.75;
    fModWaveAlphaEnd=0.95;
    warp_speed=1;
    warp_scale=1;
    zoomexp=1.074097;
    fShader=1;
    zoom=1;
    rot=0;
    cx=0.5;
    cy=0.5;
    dx=0;
    dy=0;
    warp=1;
    sx=1;
    sy=1;
    wave_r=0.541826;
    wave_g=0.907035;
    wave_b=0.436348;
    wave_x=0.911091;
    wave_y=0.486312;
    ob_size=0.01;
    ob_r=0.429397;
    ob_g=0.567931;
    ob_b=0.857834;
    ob_a=0.309108;
    ib_size=0.01;
    ib_r=0.33151;
    ib_g=0.27242;
    ib_b=0.199382;
    ib_a=0.856912;
    mv_x=12;
    mv_y=9;
    mv_dx=-0.523285;
    mv_dy=-0.160162;
    mv_l=0.055;
    mv_r=0.934155;
    mv_g=0.462715;
    mv_b=0.821308;
    mv_a=0.850204;
    warp = 0;
    wave_r = wave_r + .5*sin(time*333) + bass*.3;
    wave_g = wave_g + .5*sin(time*222) + treb*.3;
    wave_b = wave_b + .5*sin(time*111) + mid*.3;
    rot = .4*sin(mid_att*.05);
    wave_r = wave_r + 0.400*( 0.60*sin(0.933*time) + 0.40*sin(1.045*time) );
    wave_g = wave_g + 0.400*( 0.60*sin(0.900*time) + 0.40*sin(0.956*time) );
    wave_b = wave_b + 0.400*( 0.60*sin(0.910*time) + 0.40*sin(0.920*time) );
    // Appended Code From C:\Program Files\Winamp\Plugins\MilkDrop\Self\Turbulence.milk
    wave_b = if_milk(equal(bass + wave_y , bass + bass) , min(min(bass * treb , time * treb_att) , time + wave_g) , treb_att * treb);
    ob_g = max(if_milk(below(frame - bass_att , wave_g * bass) , time + treb , wave_y * wave_g) , wave_y * wave_r);
    wave_g = if_milk(below(wave_r + time , treb - bass_att) , treb_att * treb , bass * bass);
    ib_a = min(min(wave_g * wave_r , treb * mid) , wave_g - warp);
    wave_r = if_milk(below(bass + bass_att , wave_b + frame) , wave_b * bass_att , wave_g * treb);
    mv_x = 12 + bass_att - warp;
    ob_a = max(bass * time , bass_att * wave_b);
    ib_G = treb + warp;
    dy = 0 + if_milk(equal(treb + bass , mid_att * zoom) , bass_att - bass , bass_att - treb);
    wave_r = if_milk(below(wave_r * treb_att , wave_b + frame) , min(zoom + wave_g , wave_g * bass) , wave_b - warp);
    ob_g = max(if_milk(equal(ob_g + wave_y , wave_b + wave_b) , wave_y + wave_b , wave_g * warp) , treb * wave_g);
    wave_y = if_milk(above(treb * treb , treb + treb) , wave_r * frame , mid * wave_x);
    dy=if_milk(below(dy,-1), -1, dy);
    dy=if_milk(above(dy,1.0), 1.0, dy);
    wave_r=if_milk(below(wave_r,0.0), 0.0, wave_r);
    wave_r=if_milk(above(wave_r,1.0), 1.0, wave_r);
    wave_b=if_milk(below(wave_b,0.0), 0.0, wave_b);
    wave_b=if_milk(above(wave_b,1.0), 1.0, wave_b);
    wave_g=if_milk(below(wave_g,0.0), 0.0, wave_g);
    wave_g=if_milk(above(wave_g,1.0), 1.0, wave_g);
    wave_y=if_milk(below(wave_y,0.0), 0.0, wave_y);
    wave_y=if_milk(above(wave_y,1.0), 1.0, wave_y);
    ob_g=if_milk(below(ob_g,0.0), 0.0, ob_g);
    ob_g=if_milk(above(ob_g,1.0), 1.0, ob_g);
    ob_a=if_milk(below(ob_a,0.0), 0.0, ob_a);
    ob_a=if_milk(above(ob_a,1.0), 1.0, ob_a);
    ib_g=if_milk(below(ib_g,0.0), 0.0, ib_g);
    ib_g=if_milk(above(ib_g,1.0), 1.0, ib_g);
    ib_a=if_milk(below(ib_a,0.0), 0.0, ib_a);
    ib_a=if_milk(above(ib_a,1.0), 1.0, ib_a);
    mv_x=if_milk(below(mv_x,0.0), 0.0, mv_x);
    mv_x=if_milk(above(mv_x,64.0), 64.0, mv_x);
    wave_r=if_milk(below(wave_r,0.0), 0.0, wave_r);
    wave_r=if_milk(above(wave_r,1.0), 1.0, wave_r);
    wave_g=if_milk(below(wave_g,0.0), 0.0, wave_g);
    wave_g=if_milk(above(wave_g,1.0), 1.0, wave_g);
    wave_b=if_milk(below(wave_b,0.0), 0.0, wave_b);
    wave_b=if_milk(above(wave_b,1.0), 1.0, wave_b);
    ob_g=if_milk(below(ob_g,0.0), 0.0, ob_g);
    ob_g=if_milk(above(ob_g,1.0), 1.0, ob_g);
    wave_y=if_milk(below(wave_y,0.0), 0.0, wave_y);
    wave_y=if_milk(above(wave_y,1.0), 1.0, wave_y);
    wave_b=if_milk(below(wave_b,0.0), 0.0, wave_b);
    wave_b=if_milk(above(wave_b,1.0), 1.0, wave_b);
    wave_g=if_milk(below(wave_g,0.0), 0.0, wave_g);
    wave_g=if_milk(above(wave_g,1.0), 1.0, wave_g);
    wave_r=if_milk(below(wave_r,0.0), 0.0, wave_r);
    wave_r=if_milk(above(wave_r,1.0), 1.0, wave_r);
    ob_a=if_milk(below(ob_a,0.0), 0.0, ob_a);
    ob_a=if_milk(above(ob_a,1.0), 1.0, ob_a);
    ob_g=if_milk(below(ob_g,0.0), 0.0, ob_g);
    ob_g=if_milk(above(ob_g,1.0), 1.0, ob_g);
    ib_G=if_milk(below(ib_G,0.0), 0.0, ib_G);
    ib_G=if_milk(above(ib_G,1.0), 1.0, ib_G);
    wave_y=if_milk(below(wave_y,0.0), 0.0, wave_y);
    wave_y=if_milk(above(wave_y,1.0), 1.0, wave_y);
    ib_a=if_milk(below(ib_a,0.0), 0.0, ib_a);
    ib_a=if_milk(above(ib_a,1.0), 1.0, ib_a);
    // per_pixel_1=ray = pow(rad,1.8)+.05;
    // per_pixel_2=zoom = (ray/rad)*1.4 + .3*sin(ang*(bass*5))+(bass*.2);
    // per_pixel_3=rot=0;
    // per_pixel_4=dx = ((x-.5)+(y-.5)*.25*sin(time/10))*(2+.1*treb_att);
    // per_pixel_5=dy=(y-.5)*(2-.1*treb_att);
    // per_pixel_6=zoom =1;
    // per_pixel_7=;
    // per_pixel_8=warp = 1 + if_milk(above(q1 * b , sx * y) , zoomexp * a , bass_att * warp);
    // per_pixel_9=warp=if_milk(below(warp,0.01), 0.01, warp);
    // per_pixel_10=warp=if_milk(above(warp,100.0), 100.0, warp);
  }
}
register_preset( EMPR__Random__Turbulence_Sandwich);
