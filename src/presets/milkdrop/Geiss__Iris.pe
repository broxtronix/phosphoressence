from presets import PePreset

class Geiss__Iris(PePreset):

    name = 'Geiss__Iris'


    def per_frame(self):
        fRating=3
        pe.gamma=2
        pe.decay=0.97
        pe.echo_zoom=2
        pe.echo_alpha=0
        pe.echo_orient=0
        pe.wave_mode=2
        pe.wave_additive=1
        pe.wave_usedots=0
        bWaveThick=1
        bModWaveAlphaByVolume=0
        pe.wave_brighten=1
        pe.wrap=1
        pe.darken_center=0
        bRedBlueStereo=0
        pe.brighten=0
        pe.darken=0
        pe.solarize=0
        pe.invert=0
        pe.wave_a=0.97275
        fWaveScale=0.656
        fWaveSmoothing=0.9
        pe.wave_mystery=0
        fModWaveAlphaStart=0.75
        fModWaveAlphaEnd=0.95
        pe.warp_speed=1
        pe.warp_scale=1.772
        pe.zoomexp=10.4
        fShader=0
        pe.zoom=1.124
        pe.rot=0
        pe.cx=0.5
        pe.cy=0.5
        pe.dx=0
        pe.dy=0
        pe.warp=0.513
        pe.sx=1
        pe.sy=1
        pe.wave_r=0.65
        pe.wave_g=0.65
        pe.wave_b=0.65
        pe.wave_x=0.5
        pe.wave_y=0.5
        pe.ob_size=0.01
        pe.ob_r=0
        pe.ob_g=0
        pe.ob_b=0
        pe.ob_a=0
        pe.ib_size=0.01
        pe.ib_r=0.25
        pe.ib_g=0.25
        pe.ib_b=0.25
        pe.ib_a=0
        pe.mv_x=12
        pe.mv_y=9
        pe.mv_dx=0
        pe.mv_dy=0
        pe.mv_l=0.9
        pe.mv_r=1
        pe.mv_g=1
        pe.mv_b=1
        pe.mv_a=0
        pe.wave_x = pe.wave_x + 0.200*( 0.60*math.sin(1.321*pe.time) + 0.40*math.sin(1.621*pe.time) );
        pe.wave_y = pe.wave_y + 0.200*( 0.60*math.sin(1.742*pe.time) + 0.40*math.sin(1.422*pe.time) );
        pe.wave_r = pe.wave_r + 0.350*( 0.60*math.sin(0.823*pe.time) + 0.40*math.sin(0.916*pe.time) );
        pe.wave_g = pe.wave_g + 0.350*( 0.60*math.sin(0.900*pe.time) + 0.40*math.sin(1.023*pe.time) );
        pe.wave_b = pe.wave_b + 0.350*( 0.60*math.sin(0.808*pe.time) + 0.40*math.sin(0.949*pe.time) );
        pe.rot = pe.rot + 0.070*( 0.60*math.sin(0.381*pe.time) + 0.40*math.sin(0.539*pe.time) );
        pe.cx = pe.cx + 0.090*( 0.60*math.sin(0.374*pe.time) + 0.40*math.sin(0.194*pe.time) );
        pe.cy = pe.cy + 0.097*( 0.60*math.sin(0.274*pe.time) + 0.40*math.sin(0.394*pe.time) );
        pe.decay = pe.decay - 0.01*math.equal(pe.frame%70,0);
        
        pe.dx = pe.dx + pe.dx_residual;
        pe.dy = pe.dy + pe.dy_residual;
        bass_thresh = math.above(pe.bass_att,bass_thresh)*2.5 + (1-math.above(pe.bass_att,bass_thresh))*((bass_thresh-1.4)*0.98+1.4);
        dx_residual = math.equal(bass_thresh,2.5)*0.016*math.sin(pe.time*7) + (1-math.equal(bass_thresh,2.5))*dx_residual;
        dy_residual = math.equal(bass_thresh,2.5)*0.012*math.sin(pe.time*9) + (1-math.equal(bass_thresh,2.5))*dy_residual;

    def per_pixel(self):
        pe.rot=pe.rot+pe.rad*0.14*math.sin(0.6186*pe.time);
