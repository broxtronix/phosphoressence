from presets import PePreset

class Geiss__Julia_Fractal_2(PePreset):

    name = 'Geiss__Julia_Fractal_2'


    def per_frame(self):
        fRating=3
        pe.gamma=2
        pe.decay=0.98
        pe.echo_zoom=1.01
        pe.echo_alpha=0.5
        pe.echo_orient=3
        pe.wave_mode=2
        pe.wave_additive=0
        pe.wave_usedots=0
        bWaveThick=1
        bModWaveAlphaByVolume=0
        pe.wave_brighten=1
        pe.wrap=1
        pe.darken_center=0
        bRedBlueStereo=0
        pe.brighten=0
        pe.darken=0
        pe.solarize=0
        pe.invert=0
        pe.wave_a=7.74
        fWaveScale=0.656
        fWaveSmoothing=0.8
        pe.wave_mystery=0
        fModWaveAlphaStart=0.75
        fModWaveAlphaEnd=0.95
        pe.warp_speed=1
        pe.warp_scale=1.772
        pe.zoomexp=1.96
        fShader=0
        pe.zoom=0.98
        pe.rot=0
        pe.cx=0.5
        pe.cy=0.5
        pe.dx=0
        pe.dy=0
        pe.warp=0.513
        pe.sx=1
        pe.sy=1
        pe.wave_r=0.5
        pe.wave_g=0.5
        pe.wave_b=0.5
        pe.wave_x=0.5
        pe.wave_y=0.5
        pe.ob_size=0
        pe.ob_r=0
        pe.ob_g=0
        pe.ob_b=0
        pe.ob_a=0.5
        pe.ib_size=0.07
        pe.ib_r=0.25
        pe.ib_g=0.25
        pe.ib_b=0.25
        pe.ib_a=0.025
        pe.mv_x=12
        pe.mv_y=9
        pe.mv_dx=0
        pe.mv_dy=0
        pe.mv_l=0.9
        pe.mv_r=1
        pe.mv_g=1
        pe.mv_b=1
        pe.mv_a=0
        pe.wave_x = pe.wave_x + 0.500*( 0.60*math.sin(2.121*pe.time) + 0.40*math.sin(1.621*pe.time) );
        pe.wave_y = pe.wave_y + 0.500*( 0.60*math.sin(1.742*pe.time) + 0.40*math.sin(2.322*pe.time) );
        pe.wave_r = pe.wave_r + 0.500*( 0.60*math.sin(0.823*pe.time) + 0.40*math.sin(0.916*pe.time) );
        pe.wave_g = pe.wave_g + 0.500*( 0.60*math.sin(0.900*pe.time) + 0.40*math.sin(1.023*pe.time) );
        pe.wave_b = pe.wave_b + 0.500*( 0.60*math.sin(0.808*pe.time) + 0.40*math.sin(0.949*pe.time) );
        pe.zoom = pe.zoom + 0.070*( 0.60*math.sin(0.239*pe.time) + 0.40*math.sin(0.296*pe.time) );
        pe.rot = pe.rot + 0.038*( 0.60*math.sin(0.381*pe.time) + 0.40*math.sin(0.539*pe.time) );
        pe.cx = pe.cx + 0.030*( 0.60*math.sin(0.374*pe.time) + 0.40*math.sin(0.194*pe.time) );
        pe.cy = pe.cy + 0.037*( 0.60*math.sin(0.274*pe.time) + 0.40*math.sin(0.394*pe.time) );
        pe.dx = pe.dx + 0.025*( 0.60*math.sin(0.334*pe.time) + 0.40*math.sin(0.277*pe.time) );
        pe.dy = pe.dy + 0.025*( 0.60*math.sin(0.384*pe.time) + 0.40*math.sin(0.247*pe.time) );
        pe.sx = pe.sx + 0.015*( 0.60*math.sin(0.313*pe.time) + 0.40*math.sin(0.383*pe.time) );
        pe.decay = pe.decay - 0.01*math.equal(pe.frame%50,0);
        pe.ib_r = pe.ib_r + 0.2*math.sin(pe.time*0.5413);
        pe.ib_g = pe.ib_g + 0.2*math.sin(pe.time*0.3459);
        pe.ib_b = pe.ib_b + 0.2*math.sin(pe.time*0.4354);
        blah = 3.0/(pe.ib_r+pe.ib_g+pe.ib_b);
        pe.ib_r = pe.ib_r*blah; pe.ib_g = pe.ib_g*blah; pe.ib_b = pe.ib_b*blah;

    def per_pixel(self):
        pe.rot=pe.rot+pe.rad*0.25*math.sin(0.3986*pe.time);
