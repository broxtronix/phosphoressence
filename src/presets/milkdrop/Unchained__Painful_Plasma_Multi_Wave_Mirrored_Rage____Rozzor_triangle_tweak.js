function Unchained__Painful_Plasma_Multi_Wave_Mirrored_Rage____Rozzor_triangle_tweak() {
  with (Math) {
    fRating=3;
    gamma=2;
    decay=0.96;
    echo_zoom=1;
    echo_alpha=0.5;
    echo_orient=1;
    wave_mode=7;
    wave_additive=0;
    wave_usedots=0;
    bWaveThick=0;
    bModWaveAlphaByVolume=0;
    wave_brighten=0;
    wrap=0;
    darken_center=0;
    bRedBlueStereo=0;
    brighten=0;
    darken=0;
    solarize=0;
    invert=0;
    wave_a=1;
    fWaveScale=0.224562;
    fWaveSmoothing=0;
    wave_mystery=0;
    fModWaveAlphaStart=0.75;
    fModWaveAlphaEnd=0.95;
    warp_speed=1;
    warp_scale=1;
    zoomexp=1;
    fShader=0;
    zoom=1;
    rot=0;
    cx=0.5;
    cy=0.5;
    dx=0;
    dy=0;
    warp=1;
    sx=1;
    sy=1;
    wave_r=0;
    wave_g=0.1999;
    wave_b=0.7;
    wave_x=0.6;
    wave_y=0.5;
    ob_size=0.5;
    ob_r=0.03;
    ob_g=0.15;
    ob_b=0.25;
    ob_a=0.02;
    ib_size=0.5;
    ib_r=0.1;
    ib_g=0.5;
    ib_b=0.5;
    ib_a=0.01;
    mv_x=64;
    mv_y=48;
    mv_dx=0;
    mv_dy=0;
    mv_l=0;
    mv_r=0;
    mv_g=0.7;
    mv_b=1;
    mv_a=0.5;
    wavecode_0_enabled=1;
    wavecode_0_samples=512;
    wavecode_0_sep=0;
    wavecode_0_bSpectrum=1;
    wavecode_0_bUseDots=0;
    wavecode_0_bDrawThick=0;
    wavecode_0_bAdditive=0;
    wavecode_0_scaling=1;
    wavecode_0_smoothing=0.5;
    wavecode_0_r=0;
    wavecode_0_g=1;
    wavecode_0_b=1;
    wavecode_0_a=1;
    wavecode_1_enabled=0;
    wavecode_1_samples=512;
    wavecode_1_sep=0;
    wavecode_1_bSpectrum=0;
    wavecode_1_bUseDots=0;
    wavecode_1_bDrawThick=0;
    wavecode_1_bAdditive=0;
    wavecode_1_scaling=1;
    wavecode_1_smoothing=0.5;
    wavecode_1_r=1;
    wavecode_1_g=1;
    wavecode_1_b=1;
    wavecode_1_a=1;
    wavecode_2_enabled=0;
    wavecode_2_samples=512;
    wavecode_2_sep=0;
    wavecode_2_bSpectrum=0;
    wavecode_2_bUseDots=0;
    wavecode_2_bDrawThick=0;
    wavecode_2_bAdditive=0;
    wavecode_2_scaling=1;
    wavecode_2_smoothing=0.5;
    wavecode_2_r=1;
    wavecode_2_g=1;
    wavecode_2_b=1;
    wavecode_2_a=1;
    shapecode_0_enabled=0;
    shapecode_0_sides=4;
    shapecode_0_additive=0;
    shapecode_0_thickOutline=0;
    shapecode_0_x=0.5;
    shapecode_0_y=0.5;
    shapecode_0_rad=0.1;
    shapecode_0_ang=0;
    shapecode_0_r=1;
    shapecode_0_g=0;
    shapecode_0_b=0;
    shapecode_0_a=1;
    shapecode_0_r2=0;
    shapecode_0_g2=1;
    shapecode_0_b2=0;
    shapecode_0_a2=0;
    shapecode_0_border_r=1;
    shapecode_0_border_g=1;
    shapecode_0_border_b=1;
    shapecode_0_border_a=0.1;
    shapecode_1_enabled=1;
    shapecode_1_sides=3;
    shapecode_1_additive=0;
    shapecode_1_thickOutline=1;
    shapecode_1_x=0.5;
    shapecode_1_y=0.5;
    shapecode_1_rad=0.25;
    shapecode_1_ang=0;
    shapecode_1_r=1;
    shapecode_1_g=0;
    shapecode_1_b=0;
    shapecode_1_a=0.1;
    shapecode_1_r2=0;
    shapecode_1_g2=1;
    shapecode_1_b2=0;
    shapecode_1_a2=0;
    shapecode_1_border_r=1;
    shapecode_1_border_g=1;
    shapecode_1_border_b=1;
    shapecode_1_border_a=0.4;
    ang = time*1.4;
    x = 0.5 + 0.08*cos(time*1.1) + 0.03*cos(time*0.7);
    y = 0.5 + 0.08*sin(time*1.1) + 0.03*sin(time*0.7);
    r = 0.5 + 0.5*sin(time*0.713 + 1);
    g = 0.5 + 0.5*sin(time*0.563 + 2);
    b = 0.5 + 0.5*sin(time*0.654 + 5);
    r2 = 0.5 + 0.5*sin(time*0.885 + 4);
    g2 = 0.5 + 0.5*sin(time*0.556+ 1);
    b2 = 0.5 + 0.5*sin(time*0.638 + 3);
    shapecode_2_enabled=0;
    shapecode_2_sides=4;
    shapecode_2_additive=0;
    shapecode_2_thickOutline=0;
    shapecode_2_x=0.5;
    shapecode_2_y=0.5;
    shapecode_2_rad=0.1;
    shapecode_2_ang=0;
    shapecode_2_r=1;
    shapecode_2_g=0;
    shapecode_2_b=0;
    shapecode_2_a=1;
    shapecode_2_r2=0;
    shapecode_2_g2=1;
    shapecode_2_b2=0;
    shapecode_2_a2=0;
    shapecode_2_border_r=1;
    shapecode_2_border_g=1;
    shapecode_2_border_b=1;
    shapecode_2_border_a=0.1;
    warp=0;
    old_bass_flop=bass_flop;
    old_treb_flop=treb_flop;
    old_mid_flop=mid_flop;
    chaos=.9+.1*sin(pulse);
    entropy=if_milk(bnot(entropy),2,if_milk(equal(pulse,-20),1+random_integer(3),entropy));
    bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.3)*chaos+1.3);
    bass_flop=abs(bass_flop-equal(bass_thresh,2));
    treb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.3)*chaos+1.3);
    treb_flop=abs(treb_flop-equal(treb_thresh,2));
    mid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.3)*chaos+1.3);
    mid_flop=abs(mid_flop-equal(mid_thresh,2));
    bass_changed=bnot(equal(old_bass_flop,bass_flop));
    mid_changed=bnot(equal(old_mid_flop,mid_flop));
    treb_changed=bnot(equal(old_treb_flop,treb_flop));
    bass_residual = bass_changed*sin(pulse*.1*entropy) + bnot(bass_changed)*bass_residual;
    treb_residual = treb_changed*sin(pulse*.1*entropy) + bnot(treb_changed)*treb_residual;
    mid_residual = mid_changed*sin(pulse*.1*entropy) + bnot(mid_changed)*mid_residual;
    pulse=if_milk(above(abs(pulse),20),-20,pulse+(bass_thresh+mid+thresh+treb_thresh)*.052+-(bass+treb+mid)*.01);
    q1=mid_residual;
    q2=bass_residual;
    q3=treb_residual;
    q4=sin(pulse);
    q5=sin(pulse/2);
    wave_r=wave_r+.5*bass_residual;
    wave_r=wave_g+.5*mid_residual;
    wave_r=wave_b+.5*treb_residual;
    wave_mystery=mid_residual;
    ob_r=if_milk(bass_flop,treb_flop,wave_r);
    ob_b=if_milk(treb_flop,mid_flop,wave_b);
    ob_g=if_milk(mid_flop,bass_flop,wave_g);
    ob_a=.05+.05*cos(wave_r+pulse*.03);
    ob_size=.2+.2*treb_residual;
    ib_r=if_milk(bass_flop,ob_b,ob_g);
    ib_b=if_milk(treb_flop,ob_g,ob_r);
    ib_g=if_milk(mid_flop,ob_r,ob_b);
    ib_size=ob_size*cos(wave_g+pulse*0.4)*.5;
    mv_a=q1;
    mv_x=random_integer(30);
    mv_y=random_integer(30);
    mv_r=wave_b;
    mv_b=wave_g;
    mv_g=wave_r;
    wave_mode=4+4*q4;
    // per_pixel_1=newx = x - abs(q1);
    // per_pixel_2=newy = y - abs(q2);
    // per_pixel_3=newrad = sqrt((newx)*(newx)+0.5625*(newy)*(newy))*2;
    // per_pixel_4=newzoom = pow(1.03, pow(0.01+sin(newrad*newrad), newrad*2-1));
    // per_pixel_5=dx = (newx)*newzoom - newx;
    // per_pixel_6=dy = (newy)*newzoom - newy;
    // per_pixel_7=rot = -0.1*newrad*(0.5*rad+0.1);
    // per_pixel_8=zoom = zoom+.07*cos(x*10*q3);
    // per_pixel_9=rot = rot * (zoom-1);
  }
}
register_preset( Unchained__Painful_Plasma_Multi_Wave_Mirrored_Rage____Rozzor_triangle_tweak);
