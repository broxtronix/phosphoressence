from presets import PePreset

class Geiss__Bonfire(PePreset):

    name = 'Geiss__Bonfire'


    def per_frame(self):
        fRating=3
        pe.gamma=2
        pe.decay=0.98
        pe.echo_zoom=1.728
        pe.echo_alpha=0.5
        pe.echo_orient=1
        pe.wave_mode=2
        pe.wave_additive=0
        pe.wave_usedots=0
        bWaveThick=1
        bModWaveAlphaByVolume=0
        pe.wave_brighten=1
        pe.wrap=1
        pe.darken_center=0
        bRedBlueStereo=0
        pe.brighten=0
        pe.darken=0
        pe.solarize=0
        pe.invert=0
        pe.wave_a=2.2
        fWaveScale=1.17
        fWaveSmoothing=0.6
        pe.wave_mystery=0
        fModWaveAlphaStart=0.75
        fModWaveAlphaEnd=0.95
        pe.warp_speed=1
        pe.warp_scale=1.611
        pe.zoomexp=1
        fShader=0
        pe.zoom=1.031
        pe.rot=0
        pe.cx=0.5
        pe.cy=0.5
        pe.dx=0
        pe.dy=-0.018
        pe.warp=0.313
        pe.sx=0.952
        pe.sy=1
        pe.wave_r=0.675
        pe.wave_g=0.55
        pe.wave_b=0.35
        pe.wave_x=0.5
        pe.wave_y=0.14
        pe.ob_size=0.01
        pe.ob_r=0
        pe.ob_g=0
        pe.ob_b=0
        pe.ob_a=0
        pe.ib_size=0.01
        pe.ib_r=0.25
        pe.ib_g=0.25
        pe.ib_b=0.25
        pe.ib_a=0
        pe.mv_x=12
        pe.mv_y=9
        pe.mv_dx=0
        pe.mv_dy=0
        pe.mv_l=0.9
        pe.mv_r=1
        pe.mv_g=1
        pe.mv_b=1
        pe.mv_a=0
        pe.wave_r = pe.wave_r + 0.20*( 0.60*math.sin(0.849*pe.time) + 0.40*math.sin(1.090*pe.time) );
        pe.wave_g = pe.wave_g + 0.20*( 0.60*math.sin(0.711*pe.time) + 0.40*math.sin(0.982*pe.time) );
        pe.wave_b = pe.wave_b + 0.20*( 0.60*math.sin(0.737*pe.time) + 0.40*math.sin(1.012*pe.time) );
        pe.cy = pe.cy + 0.030*( 0.60*math.sin(0.393*pe.time) + 0.40*math.sin(0.223*pe.time) );
        pe.sx = pe.sx + 0.010*( 0.60*math.sin(0.313*pe.time) + 0.40*math.sin(0.383*pe.time) );
        pe.sy = pe.sy + 0.010*( 0.60*math.sin(0.367*pe.time) + 0.40*math.sin(0.272*pe.time) );

    def per_pixel(self):
        pass
