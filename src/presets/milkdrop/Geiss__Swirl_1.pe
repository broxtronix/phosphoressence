from presets import PePreset

class Geiss__Swirl_1(PePreset):

    name = 'Geiss__Swirl_1'


    def per_frame(self):
        fRating=3
        pe.gamma=2
        pe.decay=0.98
        pe.echo_zoom=2
        pe.echo_alpha=0
        pe.echo_orient=0
        pe.wave_mode=2
        pe.wave_additive=0
        pe.wave_usedots=0
        bModWaveAlphaByVolume=0
        pe.wave_brighten=1
        pe.wrap=1
        pe.darken_center=0
        bMotionVectorsOn=0
        bRedBlueStereo=0
        pe.mv_x=12
        pe.mv_y=9
        pe.brighten=0
        pe.darken=0
        pe.solarize=0
        pe.invert=0
        pe.wave_a=3.3
        fWaveScale=1.17
        fWaveSmoothing=0.5
        pe.wave_mystery=0
        fModWaveAlphaStart=0.75
        fModWaveAlphaEnd=0.95
        pe.warp_speed=1
        pe.warp_scale=2.853
        pe.zoomexp=2.1
        fShader=0
        pe.zoom=1.025
        pe.rot=0
        pe.cx=0.5
        pe.cy=0.5
        pe.dx=0
        pe.dy=0
        pe.warp=0.309
        pe.sx=1
        pe.sy=1
        pe.wave_r=0.8
        pe.wave_g=0.5
        pe.wave_b=0.3
        pe.wave_x=0.5
        pe.wave_y=0.5
        pe.ob_size=0.01
        pe.ob_r=0
        pe.ob_g=0
        pe.ob_b=0
        pe.ob_a=0
        pe.ib_size=0.01
        pe.ib_r=0.25
        pe.ib_g=0.25
        pe.ib_b=0.25
        pe.ib_a=0
        pe.wave_r = pe.wave_r + 0.400*( 0.60*math.sin(0.933*pe.time) + 0.40*math.sin(1.045*pe.time) );
        pe.wave_g = pe.wave_g + 0.400*( 0.60*math.sin(0.900*pe.time) + 0.40*math.sin(0.956*pe.time) );
        pe.wave_b = pe.wave_b + 0.400*( 0.60*math.sin(0.910*pe.time) + 0.40*math.sin(0.920*pe.time) );
        pe.zoom = pe.zoom + 0.01*( 0.60*math.sin(0.339*pe.time) + 0.40*math.sin(0.276*pe.time) );
        pe.rot = pe.rot + 0.010*( 0.60*math.sin(0.381*pe.time) + 0.40*math.sin(0.579*pe.time) );
        pe.decay = pe.decay - 0.01*math.equal(pe.frame%6,0);
        pe.dx = pe.dx + pe.dx_residual;
        pe.dy = pe.dy + pe.dy_residual;
        bass_thresh = math.above(pe.bass_att,bass_thresh)*2.5 + (1-math.above(pe.bass_att,bass_thresh))*((bass_thresh-1.4)*0.98+1.4);
        dx_residual = math.equal(bass_thresh,2.5)*0.006*math.sin(pe.time*7) + (1-math.equal(bass_thresh,2.5))*dx_residual;
        dy_residual = math.equal(bass_thresh,2.5)*0.0045*math.sin(pe.time*9) + (1-math.equal(bass_thresh,2.5))*dy_residual;

    def per_pixel(self):
        pe.rot=pe.rot+0.04*math.sin(pe.time*-2.7+pe.rad*13)*(1.3-pe.rad);
