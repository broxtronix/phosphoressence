#! /bin/sh

### config.options.example
#
# This file demonstrates how to configure PhosphorEssence in various
# ways.  To use it, rename or copy it to "config.options" and
# uncomment or modify the appropriate lines below.


### Configure Options
#
# Alternative command-line syntax:  --enable-foo[=val]
#
# These options allow you modify the basic behavior of the build
# environment.

# ENABLE_DEBUG=no
# ENABLE_OPTIMIZE=yes
# PREFIX=/usr/local


### Module Configuration
#
# Alternative command-line syntax:  --enable-module-foo[=val]
#
# Uncomment the following lines to explicitly enable or disable
# certain modules.  These options override the default behavior, which
# is to build all the modules that can be built with the libraries
# that you have installed on your system.  Note that no module will
# be built if its required software dependencies cannot be found.
# Look at the output from ./configure to see what modules will
# ultimately be built.

# ENABLE_APP_STEREO=no
# ENABLE_APP_ORTHOPROJECT=no
# ENABLE_APP_BUNDLEADJUST=yes


### Package Base Paths
#
# Alternative command-line syntax:  --with-paths=val
#
# Set these to the directories that contain lib/include directories
# for packages in non-standard locations.  List multiple search
# directories by seperating them with whitespace.

# PKG_PATHS="/foo/bar"


### Per-package Base Paths
#
# Alternative command-line syntax: --with-pkgname[=val]
#
# If val is no, this will disable searching for pkgname.
# If val is yes (the default) it will search PKG_PATHS for the pkg.
# Otherwise, val is treated as a path list that will be used only for
#     this pkg, and will locally override PKG_PATHS.

# HAVE_PKG_PKGNAME=/path/to/pkgname


### Disable discovery and hard-code flags
#
# Alternative command-line syntax: --with-pkg-libs[=val], --with-pkg-cppflags[=val]
#
# Set cppflags to prepend to the cppflags, and libs to override the libs. If
# PKG_PKGNAME_LDFLAGS is set, it will prevent configure from searching for
# PKGNAME. A basic check is done, to make sure that the libraries you
# passed in exist, but they are not checked for the required symbols. You should
# independently verify that they provide them.

#PKG_PKGNAME_CPPFLAGS=-I/path/to/headers
#PKG_PKGNAME_LDFLAGS=-L/path/to/libs -lmylib
#
# or even, if you need it (use sparingly):
#PKG_PKGNAME_LDFLAGS=/path/to/required/lib.so
